name: CMake

on:

  push:
    paths:
    - src/**
    - "**/CMakeLists.txt"
    - "CMakePresets.json"
    - .github/workflows/cmake.yml
    - vcpkg.json
    - "!**/Makefile*"

  pull_request:
    paths:
    - src/**
    - "**/CMakeLists.txt"
    - "CMakePresets.json"
    - .github/workflows/**
    - .github/workflows/cmake.yml
    - vcpkg.json
    - "!**/Makefile*"

jobs:
  mingw:
    name: Windows MSYS2 (${{ matrix.build.name }} ${{ matrix.target.name }})

    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    strategy:
      fail-fast: false
      matrix:
        build:
        - name: Regular
          preset: regular
          target: install/strip
        - name: Debug
          preset: debug
          target: install
        - name: Dev
          preset: experimental
          target: install
        target:
        - name: x86
          msystem: MINGW32
          prefix: mingw-w64-i686
          toolchain: cmake/flags-gcc-i686.cmake
        - name: x64
          msystem: MINGW64
          prefix: mingw-w64-x86_64
          toolchain: cmake/flags-gcc-x86_64.cmake

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        path-type: inherit
        update: true
        msystem: ${{ matrix.target.msystem }}
        install: >-
          ${{ matrix.target.prefix }}-ninja
          ${{ matrix.target.prefix }}-gcc
          ${{ matrix.target.prefix }}-clang
          ${{ matrix.target.prefix }}-pkg-config
          ${{ matrix.target.prefix }}-openal
          ${{ matrix.target.prefix }}-freetype
          ${{ matrix.target.prefix }}-SDL2
          ${{ matrix.target.prefix }}-zlib
          ${{ matrix.target.prefix }}-libpng
          ${{ matrix.target.prefix }}-libvncserver
          ${{ matrix.target.prefix }}-winpthreads
    - uses: actions/checkout@v2
    - name: Configure CMake
      run: >-
        cmake -S . -B build -G "MSYS Makefiles"
        --preset ${{ matrix.build.preset }}
        -D CMAKE_TOOLCHAIN_FILE=${{ matrix.target.toolchain }}
        -D CMAKE_INSTALL_PREFIX=./build/artifacts
        -D VNC=OFF
    - name: Build
      run: cmake --build build --target ${{ matrix.build.target }}
    - uses: actions/upload-artifact@v2
      with:
        name: '86Box-${{ matrix.build.name }}-MSYS2-${{ matrix.target.name }}-${{ github.sha }}'
        path: build/artifacts/bin/**

  llvm-windows:
    name: "Windows vcpkg/LLVM (${{ matrix.build.name }} ${{ matrix.target.name }})"

    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        build:
        - name: Regular
          preset: regular
          target: install/strip
        - name: Debug
          preset: debug
          target: install
        - name: Dev
          preset: experimental
          target: install
        target:
        - name: x86
          triplet: x86-windows-static
          toolchain: cmake/flags-gcc-i686.cmake
          vcvars: vcvars32.bat
        - name: x64
          triplet: x64-windows-static
          toolchain: cmake/flags-gcc-x86_64.cmake
          vcvars: vcvars64.bat

    steps:
    - uses: actions/checkout@v2
    - name: Download Ninja
      run: Invoke-WebRequest https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip -OutFile ninja-win.zip && Expand-Archive ninja-win.zip -DestinationPath .
    - uses: actions/cache@v2
      with:
        path: |
          ./vcpkg_installed
          ${{ env.LOCALAPPDATA }}/vcpkg/archives
          ${{ env.APPDATA }}/vcpkg/archives
        key: vcpkg-cache-${{ hashFiles('vcpkg.json') }}
    - name: Restore vcpkg dependencies
      run: C:/vcpkg/vcpkg install --triplet ${{ matrix.target.triplet }}
    - name: Configure CMake
      run: >
        call "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/${{ matrix.target.vcvars }}"
  
        set PATH=C:/Program Files/LLVM/bin;%PATH%

        set CC=clang.exe

        set CXX=clang++.exe

        set RC=rc.exe

        cmake -S . -B build -G Ninja --preset ${{ matrix.build.preset }}
        -D CMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        -D CMAKE_INSTALL_PREFIX=./build/artifacts
        -D VCPKG_CHAINLOAD_TOOLCHAIN_FILE=${{ github.workspace }}/${{ matrix.target.toolchain }}
        -D VCPKG_TARGET_TRIPLET=${{ matrix.target.triplet }}
      shell: cmd
    - name: Build
      run: |
        call "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/${{ matrix.target.vcvars }}"
        cmake --build build --target ${{ matrix.build.target }}
      shell: cmd
    - uses: actions/upload-artifact@v2
      with:
        name: '86Box-${{ matrix.build.name }}-Win32-LLVM-${{ matrix.target.name }}-${{ github.sha }}'
        path: build/artifacts/bin/**

  linux:
    name: "Linux GCC 11"

    runs-on: ubuntu-latest
    strategy:
      matrix:
        build:
        - name: Regular
          preset: regular
          target: install/strip
        - name: Debug
          preset: debug
          target: install
        - name: Dev
          preset: experimental
          target: install

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: sudo apt update && sudo apt install gcc-11 g++-11 libfreetype-dev libsdl2-dev libpng-dev libopenal-dev libc6-dev
    - name: Configure CMake
      run: >-
        cmake -S . -B build --preset ${{ matrix.build.preset }}
        -D CMAKE_INSTALL_PREFIX=./build/artifacts
        -D CMAKE_TOOLCHAIN_FILE=./cmake/flags-gcc-x86_64.cmake
        -D CMAKE_C_COMPILER=gcc-11 -D CMAKE_CXX_COMPILER=g++-11
    - name: Build
      run: cmake --build build --target ${{ matrix.build.target }}
    - uses: actions/upload-artifact@v2
      with:
        name: '86Box-${{ matrix.build.name }}-ubuntu-${{ github.sha }}'
        path: build/artifacts/bin/**

  macos:
    name: "macOS 11"

    runs-on: macos-11
    strategy:
      matrix:
        build:
        - name: Regular
          preset: regular
          target: install/strip
        - name: Debug
          preset: debug
          target: install
        - name: Dev
          preset: experimental
          target: install

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: brew install freetype sdl2 libpng openal-soft
    - name: Configure CMake
      run: >-
        cmake -S . -B build --preset ${{ matrix.build.preset }}
        -D CMAKE_INSTALL_PREFIX=./build/artifacts
        -D CMAKE_TOOLCHAIN_FILE=./cmake/flags-gcc-x86_64.cmake
    - name: Build
      run: cmake --build build --target ${{ matrix.build.target }}
    - uses: actions/upload-artifact@v2
      with:
        name: '86Box-${{ matrix.build.name }}-macos11-${{ github.sha }}'
        path: build/artifacts/bin/**
